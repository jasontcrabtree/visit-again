// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// START NEXT AUTH MODELS

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  entries       Entry[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// END NEXT AUTH MODELS

// model Author {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")
//   name      String
//   notebooks Notebook[]
// }

// model Notebook {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")
//   size         String
//   content      String
//   fullNotebook Boolean @default(false)
//   year         Int?
//   Author Author? @relation(fields: [id], references: [id])
//   topics NotebookTopic[]
// }

// model NotebookTopic {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")
//   topic    String
//   Notebook Notebook? @relation(fields: [id], references: [id])
// }

// One User Multiple Entries
model Entry {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  entryName String

  place       Place?    @relation(fields: [placeId], references: [id])
  entryDate   DateTime?
  description String?
  type        Type?     @relation(fields: [typeId], references: [id])
  // rating      Int?
  rating      Decimal?

  recommended Boolean          @default(false)
  photos      Photo[]
  dietary     DietaryOptions[]

  User    User?   @relation(fields: [userId], references: [id])
  userId  String?
  placeId String  @default(uuid())
  typeId  String  @default(uuid())
}

model Type {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Entry Entry[]

  name    String
  iconURL String
  iconAlt String
}

model Place {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  entry     Entry[]

  name    String
  address String
}

model Photo {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  url           String
  fileName      String
  alternateText String
  Entry         Entry?  @relation(fields: [entryId], references: [id])
  entryId       String?
}

model DietaryOptions {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  label   String
  iconURL String
  iconAlt String
  Entry   Entry?  @relation(fields: [entryId], references: [id])
  entryId String?
}
