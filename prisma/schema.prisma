// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// START NEXT AUTH MODELS
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  entries       Entry[]
  WatchList     WatchList[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// END NEXT AUTH MODELS

model Entry {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  entryName   String
  recommended Boolean   @default(false)
  entryDate   DateTime?
  description String?
  rating      Decimal?

  photos  Photo[]
  dietary DietaryOptions[]

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  place   Place?  @relation(fields: [placeId], references: [id])
  placeId String?

  type       Category?   @relation(fields: [categoryId], references: [id])
  categoryId String?
  WatchList  WatchList[]
}

enum CategoryEnum {
  Breakfast
  Brunch
  Lunch
  Dinner
  Bar
  Dessert
  Coffee
  Drinks
  Brewery
  Winery
  Other
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name  CategoryEnum[]
  Entry Entry[]
}

model Place {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  entry     Entry[]

  name    String
  address String
}

model Photo {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Entry   Entry?  @relation(fields: [entryId], references: [id])
  entryId String?

  url           String
  fileName      String
  alternateText String
}

model DietaryOptions {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  label   String
  iconURL String
  iconAlt String
  Entry   Entry?  @relation(fields: [entryId], references: [id])
  entryId String?
}

model WatchList {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Entry   Entry?  @relation(fields: [entryId], references: [id])
  entryId String?

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}
